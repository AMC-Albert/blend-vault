"""
File operation utilities for Blend Vault.
Handles reading, writing, and managing sidecar files.
"""

import os
import json
import re
from typing import Dict
from utils import (
	LOG_COLORS,
	SIDECAR_EXTENSION,
	FRONTMATTER_TAGS,
	BV_FILE_UUID_KEY,
	MD_PRIMARY_FORMAT
)
from .frontmatter import generate_frontmatter_string


def _build_current_file_section_regex() -> str:
	"""Build a regex pattern to match the Current File section in both plain and markdown link formats."""
	# Get the markdown link regex from MD_PRIMARY_FORMAT
	link_regex = MD_PRIMARY_FORMAT['regex']
	
	# Build a pattern that matches either:
	# 1. Plain heading: "### Current File"
	# 2. Markdown link heading: "### [Current File](<path>)"
	# We need to specifically check that the link name is "Current File"
	escaped_name = re.escape("Current File")
	
	# Create a more specific pattern for markdown links that contain "Current File"
	# This extracts the name part and checks it specifically
	current_file_link_pattern = rf"\[{escaped_name}\]<[^>]*>"
	
	pattern = rf"###\s+(?:{escaped_name}|{current_file_link_pattern})\s*\n```json\s*\n(.*?)\n```"
	
	return pattern


def _log(level: str, message: str) -> None:
	"""Simplified logging function."""
	print(f"{LOG_COLORS.get(level, '')}{message}{LOG_COLORS['RESET']}")


def write_sidecar_with_content_preservation(md_path: str, new_data_content: str) -> None:
	"""Write sidecar while preserving user content."""
	original_lines = []
	if os.path.exists(md_path):
		with open(md_path, 'r', encoding='utf-8') as f:
			original_lines = f.readlines()
	
	# Generate frontmatter and extract user content
	frontmatter, fm_end_idx = generate_frontmatter_string(original_lines, list(FRONTMATTER_TAGS))
	user_content = ""
	
	if original_lines:
		user_lines = original_lines[fm_end_idx + 1:] if fm_end_idx != -1 else original_lines
		
		# Find and remove existing Blend Vault Data section
		blend_vault_heading = '## %% Blend Vault Data'
		for i, line in enumerate(user_lines):
			if line.strip() == blend_vault_heading:
				user_lines = user_lines[:i]
				break
		
		user_content = "".join(user_lines).strip()
	
	# Assemble final content
	content_parts = [frontmatter]
	if user_content:
		content_parts.extend([user_content, "\n\n"])
	elif frontmatter:
		content_parts.append("\n")
	
	content_parts.append(new_data_content)
	
	with open(md_path, 'w', encoding='utf-8') as f:
		f.write("".join(content_parts))


def push_uuid_to_sidecar(sidecar_path: str, file_uuid: str, asset_updates: Dict) -> None:
	"""Push UUID and asset updates to a sidecar file."""
	try:
		# Read existing content
		original_lines = []
		if os.path.exists(sidecar_path):
			with open(sidecar_path, 'r', encoding='utf-8') as f:
				original_lines = f.readlines()		# Extract existing assets
		existing_assets = []
		blend_vault_heading = '## %% Blend Vault Data'
		
		for i, line in enumerate(original_lines):
			if line.strip() == blend_vault_heading:
				content_after = ''.join(original_lines[i:])
				# Use dynamic regex pattern for Current File section
				current_file_pattern = _build_current_file_section_regex()
				json_match = re.search(current_file_pattern, content_after, re.DOTALL)
				if json_match:
					try:
						data = json.loads(json_match.group(1))
						existing_assets = data.get('assets', [])
					except json.JSONDecodeError:
						pass
				break
		
		# Merge assets
		if asset_updates:
			asset_dict = {asset.get('uuid'): asset for asset in existing_assets if asset.get('uuid')}
			asset_dict.update(asset_updates)
			existing_assets = list(asset_dict.values())
				# Build new content
		blend_filename = os.path.basename(sidecar_path.replace(SIDECAR_EXTENSION, ''))
		new_content = "\n".join([
			"## %% Blend Vault Data",
			"This section is auto-generated by the Blend Vault plugin and will be overwritten on save.",
			"",
			"### " + MD_PRIMARY_FORMAT['format'].format(name="Current File", path="./" + blend_filename),
			"```json",
			json.dumps({
				"path": blend_filename,
				BV_FILE_UUID_KEY: file_uuid,
				"assets": existing_assets
			}, indent=2, ensure_ascii=False),
			"```",
			"",
			"### Linked Libraries",
			"- None",
			""
		])
		
		write_sidecar_with_content_preservation(sidecar_path, new_content)
		_log('SUCCESS', f"[Blend Vault] Pushed UUIDs to sidecar: {sidecar_path}")
		
	except Exception as e:
		_log('ERROR', f"[Blend Vault] Failed to push UUIDs to sidecar {sidecar_path}: {e}")
